#!/bin/bash -e

# build the library without loading the pumi module first

#module load pumi/core-sim
#export LD_LIBRARY_PATH=/usr/local/pumi/core-sim/lib:$LD_LIBRARY_PATH

echo $LD_LIBRARY_PATH
set -x
#CXXFLAGS="$CXXFLAGS -g -O0 -std=c++11 "

CXXFLAGS="$CXXFLAGS -g -O0 "
PKGCONFIG=`pkg-config --cflags --libs libmds libma` 
#mpicxx ./funcs1.cc $CXXFLAGS -c -Wall -fPIC `pkg-config --cflags --libs libmds`

#mpicxx $CXXFLAGS -c -Wall -fPIC  -I/usr/local/pumi/core-sim/include -L$HOME/lib funcs1.cc -lmds -lapf -lpcu -lbz2 -lgmi

mpicxx ./funcs1.cc ./a2.cc adaptFuncsJ.cc apfSBPShape.cc apfSBPShape3.cc dgSBPShape1.cc dgSBP3Shape1.cc dgSBP3Shape2.cc triangulationDG.cc triangulation.cc $CXXFLAGS -c -Wall -fPIC $PKGCONFIG -I`pwd` 


set +x

#mpicxx $CXXFLAGS --share -fPIC -Wl,--whole-archive -L/usr/local/pumi/core-sim/lib -lpcu -o libfuncs1.so funcs1.o
#mpicxx $CXXFLAGS --share -fPIC -Wl,-export-dynamic -L$HOME/lib funcs1.cc -L/usr/local/pumi/core-sim/lib -lmds -lapf -lpcu -lbz2 -lgmi -o libfuncs1.so funcs1.o
#mpicxx $CXXFLAGS --share -fPIC -Wl,-export-dynamic -L$HOME/lib funcs1.cc -o libfuncs1.so funcs1.o 
# because of the geniuses who maintain Ubuntu, the -Wl,--no-as-needed is required
# for newer versions of ubuntu to actually link to the Pumi libraries, even
# when the linker doesn't think they are required
mpicxx $CXXFLAGS --share -fPIC -Wl,--no-as-needed `pkg-config --libs-only-L --libs libmds` -lmds -lma -o libfuncs1.so funcs1.o a2.o adaptFuncsJ.o apfSBPShape.o apfSBPShape3.o dgSBPShape1.o dgSBP3Shape1.o dgSBP3Shape2.o triangulationDG.o triangulation.o

